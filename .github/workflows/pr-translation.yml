name: PR Translation Workflow

on:
  pull_request:
    types: [opened, synchronize, labeled, closed]
    paths: ['docs/**']
  pull_request_target:
    types: [opened, synchronize, labeled]
    paths: ['docs/**']
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  # ---------- 检测 & 评论（内部分支） ----------
  detect-docs-changes:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    outputs:
      has-docs-changes: ${{ steps.changes.outputs.any_changed }}
      total-files: ${{ steps.analyze.outputs.total_files }}
      operation-summary: ${{ steps.analyze.outputs.operation_summary }}
      skip-comment: ${{ steps.check-skip.outputs.skip }}
    steps:
      - name: Check if should skip
        id: check-skip
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.payload.pull_request?.head?.sha;
            try {
              if (sha) {
                const { data: commit } = await github.rest.repos.getCommit({ ...context.repo, ref: sha });
                const msg = commit.commit.message || '';
                if (msg.includes('🌍 自动翻译文档') || msg.includes('🔄 撤回翻译')) {
                  core.setOutput('skip', 'true'); return;
                }
              }
            } catch(e){ core.warning(`commit check failed: ${e.message}`); }
            core.setOutput('skip', 'false');

      - uses: actions/checkout@v4
        if: steps.check-skip.outputs.skip != 'true'
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Check for docs changes
        id: changes
        if: steps.check-skip.outputs.skip != 'true'
        uses: tj-actions/changed-files@v40
        with:
          files: |
            docs/**/*.{md,mdx}
            docs/**/_category_*.yml
          files_ignore: |
            docs/zh-CN/**
            docs/ja/**
            docs/Spanish/**

      - name: Analyze changes
        id: analyze
        if: steps.changes.outputs.any_changed == 'true' && steps.check-skip.outputs.skip != 'true'
        run: |
          base_sha="${{ github.event.pull_request.base.sha }}"
          added=0; modified=0; deleted=0; renamed=0; renamed_mod=0
          if operations=$(git diff --name-status --find-renames=90 $base_sha..HEAD -- docs/ 2>/dev/null); then
            filtered=$(echo "$operations" | grep -E '\.(md|mdx)$|_category_.*\.yml$' | grep -v -E '(zh-CN|ja|Spanish)' || true)
            if [[ -n "$filtered" ]]; then
              while IFS=$'\t' read -r st file rest || [[ -n "$st" ]]; do
                [[ -z "$st" ]] && continue
                case "$st" in
                  A*) ((added++)) ;;
                  M*) ((modified++)) ;;
                  D*) ((deleted++)) ;;
                  R[0-9][0-9]) sim=${st#R}; if [ "$sim" -lt 100 ]; then ((renamed_mod++)); else ((renamed++)); fi ;;
                  R*) ((renamed++)) ;;
                esac
              done <<< "$filtered"
            fi
          fi
          total=$((added+modified+deleted+renamed+renamed_mod))
          echo "total_files=$total" >> $GITHUB_OUTPUT
          echo "operation_summary=新增:$added 修改:$modified 删除:$deleted 移动:$renamed 移动+修改:$renamed_mod" >> $GITHUB_OUTPUT

  add-translation-comment:
    needs: detect-docs-changes
    if: |
      github.event_name == 'pull_request' &&
      github.event.pull_request.head.repo.fork == false &&
      needs.detect-docs-changes.outputs.has-docs-changes == 'true' &&
      needs.detect-docs-changes.outputs.skip-comment != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Add translation comment (internal PR)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request;
            const total = '${{ needs.detect-docs-changes.outputs.total-files }}';
            const summary = '${{ needs.detect-docs-changes.outputs.operation-summary }}';
            let body = `## 🌍 检测到文档变更 - 可进行多语言翻译\n\n`;
            body += `**统计信息:** 共 ${total} 个文件需要处理\n`;
            body += `**操作类型:** ${summary}\n\n`;
            body += `### 🚀 开始翻译\n在此评论回复：\`/translate all|zh|ja|es\`\n\n`;
            body += `### 🔄 撤回翻译\n在此评论回复：\`/rollback translation\`\n\n`;
            await github.rest.issues.createComment({ owner, repo, issue_number: pr.number, body });

  # ---------- 检测 & 评论（fork PR，安全，不 checkout PR 代码） ----------
  add-translation-comment-target:
    if: github.event_name == 'pull_request_target'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Comment with stats (fork-safe; no checkout)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const pr = context.payload.pull_request;
            const files = await github.paginate(github.rest.pulls.listFiles, { owner, repo, pull_number: pr.number, per_page: 100 });
            const wanted = files.filter(f => {
              const p=f.filename, inDocs=p.startsWith('docs/'),
                    okExt=/\.(md|mdx)$/.test(p)||/_category_.*\.yml$/.test(p),
                    ex=/(^|\/)(zh-CN|ja|Spanish)(\/|$)/.test(p);
              return inDocs && okExt && !ex;
            });
            let a=0,m=0,d=0,r=0; wanted.forEach(f=>{ if(f.status==='added')a++; else if(f.status==='modified')m++; else if(f.status==='removed')d++; else if(f.status==='renamed')r++; });
            const total=a+m+d+r;
            const summary=`新增:${a} 修改:${m} 删除:${d} 移动:${r} 移动+修改:0`;
            let body = `## 🌍 检测到文档变更 - 可进行多语言翻译\n\n`;
            body += `**统计信息:** 共 ${total} 个文件需要处理\n`;
            body += `**操作类型:** ${summary}\n\n`;
            body += `### 🚀 开始翻译\n在此评论回复：\`/translate all|zh|ja|es\`\n（fork PR 需要勾选 **Allow edits by maintainers**，否则无法推回你的分支）\n\n`;
            body += `### 🔄 撤回翻译\n在此评论回复：\`/rollback translation\`\n\n`;
            await github.rest.issues.createComment({ owner, repo, issue_number: pr.number, body });

  # ---------- 手动翻译（内部分支，直接推到当前 PR 分支） ----------
  manual-translate-internal:
    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/translate')
    runs-on: ubuntu-latest
    steps:
      - name: Get PR info
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const num = context.payload.issue.number;
            const { data: p } = await github.rest.pulls.get({ owner, repo, pull_number: num });
            core.setOutput('is_fork', String(p.head.repo.full_name !== `${owner}/${repo}`));
            core.setOutput('head_ref', p.head.ref);

      - name: Stop if fork (handled by fork job)
        if: steps.pr.outputs.is_fork == 'true'
        run: exit 0

      - name: Check commenter permission
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo, user=context.payload.comment.user.login;
            const { data: perm } = await github.rest.repos.getCollaboratorPermissionLevel({ owner, repo, username:user });
            if (!['admin','maintain'].includes(perm.permission)) {
              await github.rest.issues.createComment({ owner, repo, issue_number: context.payload.issue.number, body:`❌ @${user} 权限不足（需要 admin/maintain）`});
              core.setFailed('no permission');
            }

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Record BEFORE sha
        run: echo "BEFORE_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Parse translation command
        id: parse
        run: |
          c="${{ github.event.comment.body }}"
          if [[ "$c" == *"/translate all"* ]]; then L="zh-CN ja es"; else
            L=""; [[ "$c" == *" zh"* ]] && L="$L zh-CN"; [[ "$c" == *" ja"* ]] && L="$L ja"; [[ "$c" == *" es"* ]] && L="$L es"
          fi
          L=$(echo $L | xargs); echo "languages=$L" >> $GITHUB_OUTPUT

      - name: Install deps for translator
        run: npm install @anthropic-ai/sdk --no-save --legacy-peer-deps

      - name: Run translation (internal)
        env:
          TRANSLATION_API_KEY: ${{ secrets.TRANSLATION_API_KEY }}
          TARGET_LANGUAGES: ${{ steps.parse.outputs.languages }}
        run: |
          [ -z "$TRANSLATION_API_KEY" ] && echo "missing key" && exit 1
          node .github/scripts/translate.js

      - name: Commit & push
        run: |
          git config user.email "action@github.com"
          git config user.name "GitHub Action Bot"
          if [ -n "$(git status --porcelain docs/)" ]; then
            git add docs/
            git commit -m "🌍 自动翻译文档" -m "Triggered by @${{ github.event.comment.user.login }}"
            git push
            echo "AFTER_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          else
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          fi

      - name: Save translation metadata (hidden)
        if: env.HAS_CHANGES == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const body = `<!-- TRANSLATION_METADATA
            ${JSON.stringify({
              before_sha: process.env.BEFORE_SHA,
              after_sha: process.env.AFTER_SHA,
              languages: '${{ steps.parse.outputs.languages }}',
              timestamp: new Date().toISOString(),
              scope: 'internal'
            })}
            -->`;
            await github.rest.issues.createComment({ owner, repo, issue_number: context.payload.issue.number, body });

      - name: Leave result comment
        if: env.HAS_CHANGES == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            await github.rest.issues.createComment({
              owner, repo, issue_number: context.payload.issue.number,
              body: `✅ 翻译完成并已推送到当前 PR 分支。\n\n**前后 SHA:** \`${process.env.BEFORE_SHA}\` → \`${process.env.AFTER_SHA}\``
            });

  # ---------- 手动翻译（fork 分支，直接 push 回作者分支） ----------
  manual-translate-fork:
    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/translate')
    runs-on: ubuntu-latest
    steps:
      - name: Read PR info
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const num = context.payload.issue.number;
            const { data: p } = await github.rest.pulls.get({ owner, repo, pull_number: num });
            core.setOutput('is_fork', String(p.head.repo.full_name !== `${owner}/${repo}`));
            core.setOutput('fork_full_name', p.head.repo.full_name);
            core.setOutput('fork_ref', p.head.ref);
            core.setOutput('maintainer_can_modify', String(!!p.maintainer_can_modify));

      - name: Only run for fork PR
        if: steps.pr.outputs.is_fork != 'true'
        run: exit 0

      - name: Check commenter permission
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo, user=context.payload.comment.user.login;
            const { data: perm } = await github.rest.repos.getCollaboratorPermissionLevel({ owner, repo, username:user });
            if (!['admin','maintain'].includes(perm.permission)) {
              await github.rest.issues.createComment({ owner, repo, issue_number: context.payload.issue.number, body:`❌ @${user} 权限不足（需要 admin/maintain）`});
              core.setFailed('no permission');
            }

      - name: Ensure "Allow edits by maintainers"
        uses: actions/github-script@v7
        with:
          script: |
            if ('${{ steps.pr.outputs.maintainer_can_modify }}' !== 'true') {
              await github.rest.issues.createComment({
                ...context.repo, issue_number: context.payload.issue.number,
                body: '⚠️ 需要作者在 PR 勾选 **Allow edits by maintainers**，否则无法推回你的分支。'
              });
              core.setFailed('maintainer_can_modify=false');
            }

      # 仅拉取 fork 的那个分支（浅克隆），不运行 PR 代码
      - name: Prepare fork worktree
        env:
          TRANSLATION_PAT: ${{ secrets.TRANSLATION_PAT }}
        run: |
          set -e
          [ -z "$TRANSLATION_PAT" ] && echo "❌ TRANSLATION_PAT missing" && exit 1
          mkdir -p fork && cd fork
          git init
          git config user.email "action@github.com"
          git config user.name "GitHub Action Bot"
          git remote add origin https://${TRANSLATION_PAT}@github.com/${{ steps.pr.outputs.fork_full_name }}.git
          git fetch --depth=1 origin ${{ steps.pr.outputs.fork_ref }}
          git checkout -b pr-branch FETCH_HEAD
          echo "BEFORE_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      # 可信脚本来源：本仓库
      - name: Checkout base repo (trusted)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          path: base

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Parse translation command
        id: parse
        run: |
          c="${{ github.event.comment.body }}"
          if [[ "$c" == *"/translate all"* ]]; then L="zh-CN ja es"; else
            L=""; [[ "$c" == *" zh"* ]] && L="$L zh-CN"; [[ "$c" == *" ja"* ]] && L="$L ja"; [[ "$c" == *" es"* ]] && L="$L es"
          fi
          L=$(echo $L | xargs); echo "languages=$L" >> $GITHUB_OUTPUT

      - name: Install deps for translator
        working-directory: base
        run: npm install @anthropic-ai/sdk --no-save --legacy-peer-deps

      - name: Run translation against fork worktree
        env:
          TRANSLATION_API_KEY: ${{ secrets.TRANSLATION_API_KEY }}
          TARGET_LANGUAGES: ${{ steps.parse.outputs.languages }}
          WORKTREE_DIR: ${{ github.workspace }}/fork
        run: |
          set -e
          [ -z "$TRANSLATION_API_KEY" ] && echo "❌ 缺少 TRANSLATION_API_KEY" && exit 1
          # 如果 translate.js 不接受参数，可改为：cd "$WORKTREE_DIR" && node "$GITHUB_WORKSPACE/base/.github/scripts/translate.js"
          node "$GITHUB_WORKSPACE/base/.github/scripts/translate.js" "$WORKTREE_DIR"

      - name: Commit & push back to contributor branch
        env:
          TRANSLATION_PAT: ${{ secrets.TRANSLATION_PAT }}
        run: |
          set -e
          cd fork
          if [ -n "$(git status --porcelain docs/)" ]; then
            git add docs/
            git commit -m "🌍 自动翻译文档" -m "Triggered by @${{ github.event.comment.user.login }}"
            git push origin HEAD:${{ steps.pr.outputs.fork_ref }}
            echo "AFTER_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          else
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          fi

      - name: Save translation metadata (hidden)
        if: env.HAS_CHANGES == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `<!-- TRANSLATION_METADATA
            ${JSON.stringify({
              before_sha: process.env.BEFORE_SHA,
              after_sha: process.env.AFTER_SHA,
              languages: '${{ steps.parse.outputs.languages }}',
              timestamp: new Date().toISOString(),
              scope: 'fork'
            })}
            -->`;
            await github.rest.issues.createComment({ ...context.repo, issue_number: context.payload.issue.number, body });

      - name: Leave result comment
        if: env.HAS_CHANGES == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              ...context.repo, issue_number: context.payload.issue.number,
              body: `✅ 翻译完成并已推送到你的 fork 分支（当前 PR 分支）。\n\n**前后 SHA:** \`${process.env.BEFORE_SHA}\` → \`${process.env.AFTER_SHA}\``
            });

  # ---------- 撤回（同时支持内部分支 & fork 分支） ----------
  rollback-translation:
    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '/rollback translation')
    runs-on: ubuntu-latest
    steps:
      - name: Read PR info
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const num = context.payload.issue.number;
            const { data: p } = await github.rest.pulls.get({ owner, repo, pull_number: num });
            core.setOutput('is_fork', String(p.head.repo.full_name !== `${owner}/${repo}`));
            core.setOutput('fork_full_name', p.head.repo.full_name);
            core.setOutput('fork_ref', p.head.ref);
            core.setOutput('maintainer_can_modify', String(!!p.maintainer_can_modify));

      - name: Find translation metadata
        id: meta
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const num = context.payload.issue.number;
            const comments = await github.rest.issues.listComments({ owner, repo, issue_number: num, per_page: 100 });
            const rx = /<!-- TRANSLATION_METADATA\s+(.*?)\s+-->/s;
            let latest=null, metaCommentId=null;
            for (const c of comments.data.reverse()) {
              const m = c.body && c.body.match(rx);
              if (m) { try { latest=JSON.parse(m[1]); metaCommentId=c.id; break; } catch {} }
            }
            if (!latest) { core.setFailed('no metadata'); return; }
            core.setOutput('before', latest.before_sha);
            core.setOutput('after', latest.after_sha);
            core.setOutput('meta_id', String(metaCommentId));
            core.setOutput('scope', latest.scope || 'internal');

      # 内部分支撤回：本库直接 reset/revert
      - name: Rollback (internal)
        if: steps.pr.outputs.is_fork != 'true' && success()
        run: |
          set -e
          git config user.email "action@github.com"
          git config user.name "GitHub Action Bot"
          git pull --ff-only origin ${{ github.event.pull_request.base.ref }} || true
          git fetch --all --prune || true
          # 使用 reset --hard 回到 before
          git checkout ${{ github.event.pull_request.head.ref }}
          git reset --hard '${{ steps.meta.outputs.before }}'
          git push --force

      # fork 分支撤回：用 PAT 强推回作者分支
      - name: Rollback (fork)
        if: steps.pr.outputs.is_fork == 'true' && success()
        env:
          TRANSLATION_PAT: ${{ secrets.TRANSLATION_PAT }}
        run: |
          set -e
          [ -z "$TRANSLATION_PAT" ] && echo "❌ TRANSLATION_PAT missing" && exit 1
          if [ "${{ steps.pr.outputs.maintainer_can_modify }}" != "true" ]; then
            echo "❌ 作者未允许维护者编辑，无法撤回"; exit 1
          fi
          mkdir -p fork && cd fork
          git init
          git config user.email "action@github.com"
          git config user.name "GitHub Action Bot"
          git remote add origin https://${TRANSLATION_PAT}@github.com/${{ steps.pr.outputs.fork_full_name }}.git
          git fetch --depth=1 origin ${{ steps.pr.outputs.fork_ref }}
          git checkout -b pr-branch FETCH_HEAD
          git reset --hard '${{ steps.meta.outputs.before }}'
          git push origin HEAD:${{ steps.pr.outputs.fork_ref }} --force

      - name: Delete metadata comment
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const id = Number('${{ steps.meta.outputs.meta_id }}');
            if (id) await github.rest.issues.deleteComment({ ...context.repo, comment_id: id });

      - name: Leave rollback result comment
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const before='${{ steps.meta.outputs.before }}', after='${{ steps.meta.outputs.after }}';
            await github.rest.issues.createComment({
              ...context.repo, issue_number: context.payload.issue.number,
              body: `✅ 已撤回翻译：\`${after}\` → \`${before}\`（当前 PR 分支已回退）`
            });

  # ---------- 合并后的礼貌评论 ----------
  post-merge-comment:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Comment after merge
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            await github.rest.issues.createComment({ ...context.repo, issue_number: pr.number, body: `❤️ Great PR @${pr.user.login} ❤️` });
